ddl-auto:create----每次运行该程序，没有表格会新建表格，表内有数据会清空

ddl-auto:create-drop----每次程序结束的时候会清空表

ddl-auto:update----每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新

ddl-auto:validate----运行程序会校验数据与数据库的字段类型是否相同，不同会报错

http statusCode(状态码) https://www.cnblogs.com/hao-1234-1234/p/8940079.html
201-206都表示服务器成功处理了请求的状态代码，说明网页可以正常访问。
        200（成功）  服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。
        201（已创建）  请求成功且服务器已创建了新的资源。
        202（已接受）  服务器已接受了请求，但尚未对其进行处理。
        203（非授权信息）  服务器已成功处理了请求，但返回了可能来自另一来源的信息。
        204（无内容）  服务器成功处理了请求，但未返回任何内容。
        205（重置内容） 服务器成功处理了请求，但未返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如清除表单内容以输入新内容）。
        206（部分内容）  服务器成功处理了部分 GET 请求。

        有nativeQuery = true时，是可以执行原生sql语句，所谓原生sql，也就是说这段sql拷贝到数据库中，然后把参数值给一下就能运行了，比如：
        @Query(value = "select * from product_rel where audit_id=?1 and process_object=0 ",nativeQuery = true)
        List<ProductRel> findAllByProductAuditId(Integer id);


  // 解析：将你嵌入页面的高度设置成屏幕可视高度减去原框架顶部和底部高度（宽度设置同理）。
        // reSerSize();
        // window.onresize = reSerSize();
        //跨域HTML 代码
        // function reSerSize() {
        //     var windowsheight = window.innerHeight;
        //     document.getElementById("content1").style.height = (windowsheight - 50) + "px";
        // }



        SpringBoot 打包注意
        一般情况spring-boot-starter-web是自带tomcat（即springboot内嵌tomcat）,所以打包直接生成jar包，用java -jar命令就可以启动。
        但，有时我们希望用war格式的包，而不是jar格式的包。这就需要以下几步改造：
        1.将项目的启动类Application.java继承SpringBootServletInitializer并重写configure方法
       @SpringBootApplication
       public class Application extends SpringBootServletInitializer {
       @Override
         protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(Application.class);
         }
                 public static void main(String[] args) throws Exception {
                     SpringApplication.run(Application.class, args);
                 }
         }
        2.在pom.xml文件中，project下面增加package标签
        <packaging>war</packaging>
        3.还是在pom.xml文件中，dependencies下面添加
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        注：<scope>provided</scope>表示在编译和测试时使用（不加它，打的包中会指定tomcat，用tomcat部署时会因tomcat版本报错；而加上它，打包时不会把内置的tomcat打进去）
        还要注意：spring-boot项目使用的jdk版本要和tomcat的jdk版本一致（都是1.8）;tomcat的lib中el-api.jar版本最好要是javax.el-api-3.0.0.jar版本，防止低版本冲突。
        只需要以上3步就可以打包成war包，并且部署到tomcat中了。需要注意的是这样部署的request url需要在端口后加上项目的名字才能正常访问。
        spring-boot更加强大的一点就是：即便项目是以上配置，依然可以用内嵌的tomcat来调试，启动命令和以前没变